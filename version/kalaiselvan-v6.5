#!/usr/bin/bash
clear
#variables
function variable {
place="Vellore"
name="kalaiselvan"
scan_DOcode="RT_073"
sumlogpath="/imagedata1/Logs/Upload/"

}
#title card
function title {
echo
echo
echo -e "                                                     \033[1;32m  LIC ${place} Divisional Office\033[0m"
echo -e "                                                    \033[4;31mThis script written by $(echo ${name}|tr [a-z] [A-Z])\033[0m"
echo
echo -e "                                                                \033[4;35mDISCLAMER\033[0m"
echo "                         If you upload the DVD file then don't delete the DVD file run this command 'kalaiselvan'
                              it will upload soft files on IT Programmer after you can delete that DVD file.
				   	  upload tracker data also generating in the script."
echo
}
#cleate dir variables
function file_variable_create {
masterdir=/root/${name}/
softfile=/root/${name}/soft-summary/
softfiledir=/root/${name}/soft-summary/soft/
summarytemp=/root/${name}/soft-summary/summarytemp/
softlogentry=/root/${name}/soft-summary/soft.csv
summarylogentry=/root/${name}/soft-summary/summary.csv
}
if [ ! -s ./info.conf ]
then
	echo "info.conf file is not avilable!!!"
	exit 1
else
	username=$(grep -i 'username' ./info.conf | awk -F = '{ print $2 }')
	ipaddr=$(grep -i 'ipaddr' ./info.conf | awk -F = '{ print $2 }')
fi
it_programmer="${username}@${ipaddr}:/backup/D067"

#check dirctory and file
function dir_checking {
#check parent dir
if [ ! -d ${masterdir} ]
then
    echo
    mkdir -p ${masterdir}
    echo "base directory created."
fi
#check work dir
if [ ! -d ${softfile} ]
then
    echo
    mkdir -p ${softfile}
    echo "work directory created."
fi
#check soft file copy dir
if [ ! -d ${softfiledir} ]
then
    echo
    mkdir -p ${softfiledir}
    echo "soft file directory created."
fi
#check summary temp dir
if [ ! -d ${summarytemp} ]
then
    echo
    mkdir -p ${summarytemp}
    echo "summary directory created."
fi
#check soft file upload entry
if [ ! -e ${softlogentry} ]
then
    echo
    touch ${softlogentry}
    echo "soft log file created."
fi
#summary log entry
if [ ! -e ${summarylogentry} ]
then
    echo
    touch ${summarylogentry}
    echo "summary log file created."
fi
}
#soft files count for old
function old_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo -e "Checking for old soft bending to upload.\n"
echo "Old Soft Files Count : ${file_count}"
sleep 0.5
if [ ${file_count} -ne 0 ]
then
    soft_file_upload
fi
}
#Dvd file name creating
function dvd_file_name_create {
cd ${sumlogpath}
dvd_name=$(ls -tr SummaryReport-RT*.log | tail -n 10 | sed "s/ //g")
incremental=
agency=
health=
soft_already=
echo
for i in ${dvd_name}
do
    center=$(echo "${i}" | cut -d _ -f 2 )
    softno=$(echo "${i}" | cut -d _ -f 2 | sed "s/-//g")
    softfilename="soft-${softno}.txt"
    fgrep=$(echo "${softfilename}" | cut -d . -f 1)
    grep -i -w "${fgrep}" ${softlogentry} > /dev/null 2>&1
    if [ ${?} -eq 0 ]
    then
	#echo
        #echo "This ${fgrep} file already upload."
	soft_already=${soft_already}\ ${fgrep}
        sleep 0.5
    elif [ -e ${sumlogpath}${softfilename} ]
    then
        grep -i IAD "${softfilename}" &> /dev/null 
        if [ ${?} -ne 0 ]
	then
            find ${sumlogpath} -iname ${softfilename} -type f -exec cp -p {} ${softfiledir} \; 2> /dev/null
            sleep 0.5
	else
	    #echo
	    echo "This ${softfilename} Agency no need to upload.."
	fi
    else
	#echo
	echo "${i}" | grep -i "[5][0-9][0-9][0-9]" &>/dev/null
	agen=${?}
	echo "${i}" | grep -i "[6][0-9][0-9][0-9]" &>/dev/null
	inc=${?}
	echo "${i}" | grep -i "[H][0][7][3]" &>/dev/null
	hel=${?}
        if [[ ${agen} -eq 0 ]]
	then
	    #echo "This ${softfilename} Agency Batch is empty no need.."
	    agency=${agency}\ ${softfilename} 
	elif [[ ${inc} -eq 0 ]]
	then
	    #echo "This ${softno} Incremental batch not generating soft files.."
	    incremental=${incremental}\ ${center}
	elif [[ ${hel} -eq 0 ]]
	then
	    #echo "This ${softfilename} Helth batch no need to upload.."
	    health=${health}\ ${softfilename}
	else
	    echo "Something error occured.."
	fi
    fi
done
echo "This soft files already uploaded.."
echo ${soft_already}
sleep 1
if [[ ! -z ${incremental} ]]
then
    echo
    echo "This Incremental batchs not generating softfiles"
    echo ${incremental}
    sleep 1
fi
if [[ ! -z ${health} ]]
then
    echo
    echo "This Health files no need send "
    echo ${health}
    sleep 1
fi
if [[ ! -z ${agency} ]]
then
    echo
    echo "This Agency files no need to send "
    echo ${agency}
    sleep 1
fi
}
#check old files uploaded or not
function soft_file_upload {
#soft_file_rename
softfilecount=$(ls ${softfiledir})
for i in ${softfilecount}
do
	j=$(echo ${i} | cut -d . -f 1)
        grep -i -w "${j}" ${softlogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
            echo "${i}" | grep -i "IAD" > /dev/null 2>&1
	    agenco=${?}
            if [ ${agenco} -ne 0 ]
            then
                scp -r ${softfiledir}${i} ${it_programmer} > /dev/null 2>&1
                if [ ${?} -eq 0 ]
                then
                    echo
                    echo "This ${i} file upload successfull"
                    sleep 0.5
		    rm -f ${softfiledir}${i}
		else
		    echo "Error to upload check the connectivity on the server!!"
                fi
            else
                echo
                echo "This ${i} file is Agency so it's removing"
                rm -f ${softfiledir}${i}
	    fi
            grep -i "${j}" ${softlogentry} > /dev/null 2>&1
            if [ ${?} -ne 0 ] 
            then
		echo "${i}" | grep -i "IAD" > /dev/null 2>&1
		if [ ${?} -eq 0 ]
		then
                    echo "$(date +%d/%m/%Y--%R)  ${j}  no_need" >> ${softlogentry}
		else
		    echo "$(date +%d/%m/%Y--%R)  ${j}  uploaded" >> ${softlogentry}
		fi
            else
                echo
                echo "This log already created in softentry.log file"
            fi    
        else
            if [ -e ${softfiledir}${i} ]
            then
                echo
                echo "This file is ${i} Already uploaded so it's removing."
                rm -f ${softfiledir}${i}
            fi
        fi
done
}
#current soft files counting
function current_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo "New Soft Files Count : ${file_count}"
if [ 0 -eq ${file_count} ]
then
        echo
        echo "No soft files for uploading..."
        sleep 0.5
else
        echo
        echo "Soft files checking and sending to IT Programmer...."
        sleep 0.5
        soft_file_upload
fi
}
#summary files copying
function summary_file {
echo
sum_already=
for i in ${dvd_name}
do
   batchcheck=$(echo "${i}" | cut -d _ -f 2)
   grep -i ${batchcheck} ${summarylogentry} &> /dev/null
   if [[ ${?} -ne 0 ]]
   then
       sumval=$(echo "${i}" | cut -d - -f2,3)
       sumval3=$(echo ${sumval} | sed 's/RT_//g' | sed 's/-//g')
       sumval2=$(echo "${i}" | cut -d - -f4,5 | cut -d _ -f 1)
       find ${sumlogpath} -iname "SummaryReport-${sumval}*-${sumval2}*.log" -type f -exec cp -p {} ${summarytemp}/SummaryReport-${scan_DOcode}-${sumval}-${sumval2}\.log \; 2>/dev/null
       if [ ${?} -ne 0 ]
       then
           echo "Summary report Not avilable on this batch ${scan_DOcode}-${sumval} -${sumval2}!!"
       fi
   else
       sum_already=${sum_already}\ ${batchcheck}
       #echo "This ${i} batch summary log already created.." 
   fi
   #echo ${sumval3}${sumval2}
done
echo "This batchs already log created"
echo ${sum_already}
}
function sumremove {
reg_sec=$(ls ${summarytemp} | wc -l)
if [ ${reg_sec} -ne 0 ]
then
    rm -f ${summarytemp}${i}
fi
}
function txtcopy {
for i in ${othertxt}
do
    grep ${i} ${summarylogentry} &> /dev/null
    if [ ${?} -ne 0 ]
    then
	txt=$(echo ${i} | sed 's/-/*/g')
        find /imagedata1/UploadPoint -iname "*${txt}*.TXT" -type f -exec cp -p {} /root/co \; 2>/dev/null
        if [ ${?} -ne 0 ]
	then
    	    echo "Error to copy the file ${i}.TXT.."
        fi
    fi
done
}
function csvcopy {
for i in ${regcsv}
do
    grep ${i} ${softlogentry} &> /dev/null
    if [ ${?} -ne 0 ]
    then
        find /imagedata1/UploadPoint/ -iname ${i} -type f -exec cp -p {} /root/co \; 2>/dev/null
        if [ ${?} -ne 0 ]
        then
            echo "Error to copy the file ${i}.."
        fi
    fi
done
}
function sumdata {
batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
date=$(cat ${summarytemp}${i} | grep -Eow "[0-9][0-9].[0-9][0-9].[0-9][0-9][0-9][0-9]|[0-9][0-9]\/[0-9][0-9]\/[0-9][0-9][0-9][0-9]" | sed 's/\//-/g' | sed 's/\./-/g' | sed 's/\:/-/g' | head -n 1)
policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -iE "policy|agency" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
starttime=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' | awk NR==1 | cut -b 1-5 | sed 's/\./:/g')
endtime=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'|awk NR==2 | cut -d " " -f 2 | cut -b 1-5 | sed 's/\./:/g')
sct=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' | awk NR==1 | sed 's/\./:/g')
ect=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'|awk NR==2 | cut -d " " -f 2 | sed 's/\./:/g')
td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
}
function report {
grep "${batchno}" ${summarylogentry} > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
    echo 
    echo "${types} Summary log create for this batch ${i}.."
    echo "${doc},  ${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
fi
}
#summary date fetching in files
function summary_data_colect {
regcsv=
othertxt=
for i in $(ls ${summarytemp})
do
    echo "${i}" | grep -i "H073" > /dev/null 2>&1
    health=${?}
    echo "${i}" | grep -i [5][0-9][0-9][0-9] > /dev/null 2>&1
    agency=${?}
    echo "${i}" | grep -i [0][0-9][0-9][0-9] > /dev/null 2>&1
    regular=${?}
    echo "${i}" | grep -i [6][0-9][0-9][0-9] > /dev/null 2>&1
    if [ ${?} -eq 0 ]
    then
        #incremental section
        batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}${i} | grep -Eow "[0-9][0-9].[0-9][0-9].[0-9][0-9][0-9][0-9]|[0-9][0-9]\/[0-9][0-9]\/[0-9][0-9][0-9][0-9]" | sed 's/\//-/g' | sed 's/\./-/g' | sed 's/\:/-/g' | head -n 1)
        policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "policy" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' | awk NR==1 | cut -b 1-5 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'|awk NR==2 | cut -d " " -f 2 | cut -b 1-5 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' | awk NR==1  | sed 's/\./:/g')
	ect=$(cat ${summarytemp}${i} | grep -Eow '[0-9][0-9].[0-9][0-9].[0-9][0-9]|[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'|awk NR==2 | cut -d " " -f 2 | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
	types=Incremental
	doc=ID
	report
        sumremove
	othertxt=${othertxt}\ ${batchno}
	txtcopy
    elif [ ${health} -eq 0 ]
    then
        #agengy batch
	types=Health
	doc=HD
        sumdata
	report
     	sumremove
	othertxt=${othertxt}\ ${batchno}
	txtcopy
    elif [ ${agency} -eq 0 ]
    then
        #agengy section
	types=Agency
	doc=IAD
        sumdata
        report
	sumremove
	othertxt=${othertxt}\ ${batchno}
	txtcopy
    elif [ ${regular} -eq 0 ]
    then
        #regular section
	types=Regular
	doc=PD
	sumdata
	report
	sumremove
	regcsv=${regcsv}\ soft-$(echo ${batchno} | sed 's/-//g').csv
	csvcopy
     else
         echo "That file not contain information is missing ${i}"
     fi
done
}
variable
title
file_variable_create
dir_checking
old_soft_file_count
dvd_file_name_create
current_soft_file_count
summary_file
summary_data_colect
csvcopy
echo
echo "To check Summary log use the 'summaryreport'"
echo 
