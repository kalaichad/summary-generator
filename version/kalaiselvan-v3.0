#!/bin/bash
clear
#variables
function variable {
place="Machilipatnam"
name="kalaiselvan"
scan_DOcode="AI_067"

}

#title card
function title {
echo
echo -e "                                                         \033[1;32m  LIC ${place} DO\033[0m"
echo -e "                                                    \033[4;31mThis script writed by KALAISELVAN\033[0m"
echo
echo -e "                                                                \033[4;35mDISCLAMER\033[0m"
echo "                         If you upload the DVD file then don't delete the DVD file run this command 'kalaiselvan'
                              it will upload soft files on IT Programmer after you can delete that DVD file."
echo
}

if [ ! -s ./info.conf ]
then
	echo "info.conf file is not avilable!!!"
	exit 1
else
	username=$(grep -i 'username' ./info.conf | awk -F = '{ print $2 }')
	ipaddr=$(grep -i 'ipaddr' ./info.conf | awk -F = '{ print $2 }')
fi
it_programmer="${username}@${ipaddr}:/backup/D067"

#cleate dir variables
function file_variable_create {
masterdir=/root/${name}/
softfile=/root/${name}/softfile/
softfiledir=/root/${name}/softfile/soft/
softerror=/root/${name}/softfile/error.log
summarytemp=/root/${name}/softfile/summarytemp/
softlogentry=/root/${name}/softfile/soft.log
summarylogentry=/root/${name}/softfile/summary.csv
}

#check dirctory and file
function dir_checking {
#check parent dir
if [ ! -d ${masterdir} ]
then
    echo
    mkdir -p ${masterdir}
    echo "base dir created"
fi
#check work dir
if [ ! -d ${softfile} ]
then
    echo
    mkdir -p ${softfile}
    echo "work dir created"
fi
#check soft file copy dir
if [ ! -d ${softfiledir} ]
then
    echo
    mkdir -p ${softfiledir}
    echo "soft file dir created"
fi
#check soft file error log
if [ ! -e ${softerror} ]
then
    echo
    touch ${softerror}
    echo "error.log created"
fi
#check summary temp dir
if [ ! -d ${summarytemp} ]
then
    echo
    mkdir -p ${summarytemp}
    echo "summary dir created"
fi
#check soft file upload entry
if [ ! -e ${softlogentry} ]
then
    echo
    touch ${softlogentry}
    echo "soft log file created"
fi
#summary log entry
if [ ! -e ${summarylogentry} ]
then
    echo
    touch ${summarylogentry}
    echo "summary log file created"
fi
}

#soft files count for old
function old_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo "Old Soft Files Count : ${file_count}"
sleep 1
}

#check old files uploaded or not
function old_soft_file_check_remove {
echo
echo "Upload checking for old soft files..."
for i in $(ls ${softfiledir})
do
        grep -i ${i} ${softlogentry} > /dev/null 2>&1
        grepreco=$?
        if [ ${grepreco} -eq 0 ]
        then
	    echo
	    if [ -e ${softfiledir}${i} ]
	    then
	        echo "This ${i} file already uploaded so it's removing." 
                rm -f ${softfiledir}${i}
	    fi
        elif [ ${grepreco} -ne 0 ]
        then
            echo
            echo "This soft file not uploaded.. "
            echo "Upload starting..."
            scp -r ${softfiledir}${i} ${it_programmer}
            echo "This ${i} file upload successfull"
        else
            echo
            echo "Old soft files nothing to upload..."
        fi
done
}

#Dvd file name creating
function dvd_file_name_create {
dvd_name=$(ls /opt/UploadPoint/ | sed "s/ //g")
for i in ${dvd_name}
do
    softno=$(echo ${i} | cut -d _ -f 2 | sed "s/-//g")
    softfilename=$(echo soft-${softno}.txt)
    dvd_batch=${i}
    soft_file_copy
done
}

#soft files copying
function soft_file_copy {
for i in ${softfilename}
do
     fgrep=$(echo ${i} | cut -d . -f 1)
     grep -i -w ${fgrep} ${softlogentry} > /dev/null 2>&1
     if [ $? -eq 0 ]
     then
         echo
         echo "This ${fgrep} file already upload.This DVD file ${dvd_batch} delete"
         sleep 1
     elif [ -s /imagedata1/Logs/Upload/${i} ]
     then
         find /imagedata1/Logs/Upload/ -iname ${i} -type f -exec cp -p {} ${softfiledir} \; 2> /dev/null
         sleep 1
     else
         echo
         echo "This file ${i} not avilable in /imagedata1/Logs/Upload"
         echo "If this file is Incremental, Agengy or empty then leave it"
         sleep 1
     fi
done
}

#soft file renaming
function soft_file_rename {
for i in $(ls ${softfiledir})
do
    mv ${softfiledir}${i} ${softfiledir}$(echo ${i} | cut -d . -f 1) 2> /dev/null
done
}

#current soft files counting
function current_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo "Current Soft Files Count : ${file_count}"
lscount=$(ls ${softfiledir} | wc -l)
if [ 0 -eq ${lscount} ]
then
        echo
        echo "No soft files for uploading..."
        sleep 1
else
        echo
        echo "Soft files checking and sending to IT Programmer...."
fi
}

#soft files uploading
function soft_file_upload {
softfilecount=$(ls ${softfiledir})
for i in ${softfilecount}
do
        grep -i -w ${i} ${softlogentry} > /dev/null 2>&1
        grepreco=$?
        softrm=${i}
        upload
done
}

function upload {
if [ ${grepreco} -ne 0 ]
then
        scp -r ${softfiledir}${i} ${it_programmer}
        sleep 1
        grep -i ${softrm} ${softlogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "$(date +%d/%m/%Y--%R)  ${softrm}  uploaded" >> ${softlogentry}
            sleep 1
        else
            echo
            echo "This log already created in softentry.log file"
        fi
else
        echo
        echo "This file is ${i} Already uploaded"
        rm -rf ${softfiledir}${i}
        sleep 1
fi
}

#soft files uploading
function soft_file_upload {
softfilecount=$(ls ${softfiledir})
for i in ${softfilecount}
do
        grep -i -w ${i} ${softlogentry} > /dev/null 2>&1
        grepreco=$?
        softrm=${i}
        upload
done
}

#upload section
function upload {
if [ ${grepreco} -ne 0 ]
then
        scp -r ${softfiledir}${i} ${it_programmer}
        sleep 1
        grep -i ${softrm} ${softlogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "$(date +%d/%m/%Y--%R)  ${softrm}  uploaded" >> ${softlogentry}
            sleep 1
        else
            echo
            echo "This log already created in softentry.log file"
        fi
else
	if [ -e ${softfiledir}${i} ]
	then
            echo
            echo "This file is ${i} Already uploaded so it's removing."
            rm -rf ${softfiledir}${i}
	fi
        sleep 1
fi
}

#upload files check and removing
function after_upload {
for i in $(ls ${softfiledir})
do
    grep -i ${i} ${softlogentry} > /dev/null 2>&1
    #echo $?
    if [ $? -eq 0 ]
    then
	if [ -e ${softfiledir}${i} ]
	then
	    echo "This file ${i} upload completed."
	    rm -rf ${softfile}${i}
	fi
    else 
	echo "File ${i} not uploaded try to upload again."
        scp -r ${softfiledir}${i} ${it_programmer}
        sleep 1
        grep -i ${softrm} ${softlogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "$(date +%d/%m/%Y--%R)  ${softrm}  uploaded" >> ${softlogentry}
            sleep 1
        fi 
    fi
done
}

#summary files copying
function summary_file {
for i in ${dvd_name}
do
   sumval=$(echo ${i} | cut -d - -f2)
   sumval2=$(echo ${i} | cut -d - -f3,4 | cut -d _ -f 1)
   find /imagedata1/Logs/Upload/ -iname "SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log" -type f -exec cp -p {} ${summarytemp} \; 2>/dev/null
   findreco=$?
   if [ ${findreco} -ne 0 ]
   then
       echo
       echo "Summary report Not avilable this batch ${scan_DOcode}-${sumval}\ -${sumval2}"
   else
       summary_data_colect
   fi
done
echo
echo "summary log added.."
}

#summary date fetching in files
function summary_data_colect {
for i in $(ls ${summarytemp}| wc -l)
do
    echo "${sumval}" | grep -i H036 > /dev/null 2>&1
    health=$?
    echo "${sumval2}" | grep -i IAD > /dev/null 2>&1
    agency=$?
    grep -i "Trying to insertdivision_067" ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log > /dev/null 2>&1
    regular=$?
    grep -i Incremental ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
	#incremental section
        batchno=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "policy" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $5 }' | cut -d . -f1,2 | sed 's/\./:/g' )
        endtime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $10 }' | cut -d . -f1,2 | sed 's/\./:/g' )
	sct=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $5 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $10 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep ${batchno} ${summarylogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -rf ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log
        fi
    elif [ ${health} -eq 0 ]
    then
	#agengy batch
        batchno=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -iE 'policy|agency' | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect==$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep ${batchno} ${summarylogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -rf ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log
        fi
    elif [ ${agency} -eq 0 ]
    then
	#agengy section
        batchno=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "agency" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep ${batchno} ${summarylogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -rf ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log
        fi
    elif [ ${regular} -eq 0 ]
    then
	#regular section
        batchno=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "policy" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep ${batchno} ${summarylogentry} > /dev/null 2>&1
        if [ $? -ne 0 ]
        then
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
	if [ ${reg_sec} -ne 0 ]
	then
            rm -rf ${summarytemp}SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log
	fi
    else
        echo "File not contain this information is missing"
    fi
done
}

#functio calls
variable
title
file_variable_create
dir_checking
old_soft_file_count
old_soft_file_check_remove
dvd_file_name_create
soft_file_rename
current_soft_file_count
soft_file_upload
after_upload
summary_file
