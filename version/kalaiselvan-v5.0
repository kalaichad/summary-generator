#!/bin/bash
clear
#variables
function variable {
place="Machilipatnam"
name="kalaiselvan"
scan_DOcode="AI_067"

}

#title card
function title {
echo
echo
echo -e "                                                         \033[1;32m  LIC ${place} DO\033[0m"
echo -e "                                                    \033[4;31mThis script written by $(echo ${name}|tr [a-z] [A-Z])\033[0m"
echo
echo -e "                                                                \033[4;35mDISCLAMER\033[0m"
echo "                         If you upload the DVD file then don't delete the DVD file run this command 'kalaiselvan'
                              it will upload soft files on IT Programmer after you can delete that DVD file."
echo
}

if [ ! -s ./info.conf ]
then
	echo "info.conf file is not avilable!!!"
	exit 1
else
	username=$(grep -i 'username' ./info.conf | awk -F = '{ print $2 }')
	ipaddr=$(grep -i 'ipaddr' ./info.conf | awk -F = '{ print $2 }')
fi
it_programmer="${username}@${ipaddr}:/backup/D067"

#cleate dir variables
function file_variable_create {
masterdir="/root/${name}/"
softfile="/root/${name}/soft-summary/"
softfiledir="/root/${name}/soft-summary/soft/"
summarytemp="/root/${name}/soft-summary/summarytemp/"
softlogentry="/root/${name}/soft-summary/soft.csv"
summarylogentry="/root/${name}/soft-summary/summary.csv"
oldsoftfile="/root/${name}/oldsoftfile/"
}

#check dirctory and file
function dir_checking {
#check parent dir
if [ ! -d ${masterdir} ]
then
    echo
    mkdir -p ${masterdir}
    echo "base directory created."
fi
#check work dir
if [ ! -d ${softfile} ]
then
    echo
    mkdir -p ${softfile}
    echo "work directory created."
fi
#check soft file copy dir
if [ ! -d ${softfiledir} ]
then
    echo
    mkdir -p ${softfiledir}
    echo "soft file directory created."
fi
#check summary temp dir
if [ ! -d ${summarytemp} ]
then
    echo
    mkdir -p ${summarytemp}
    echo "summary directory created."
fi
#check soft file upload entry
if [ ! -e ${softlogentry} ]
then
    echo
    touch ${softlogentry}
    echo "soft log file created."
fi
#summary log entry
if [ ! -e ${summarylogentry} ]
then
    echo
    touch ${summarylogentry}
    echo "summary log file created."
fi
#oldsoftfile
if [ ! -d ${oldsoftfile} ]
then
    echo
    mkdir -p ${oldsoftfile}
    echo "Old soft file directory"
fi
}

#soft files count for old
function old_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo "Old Soft Files Count : ${file_count}"
sleep 1
if [ ${file_count} -ne 0 ]
then
    old_soft_file_check_remove
fi
}

#check old files uploaded or not
function old_soft_file_check_remove {
echo
echo "Upload sequence Tool started"
sleep 1
echo
soft_file_rename
echo "checking for old soft files..."
for i in $(ls ${softfiledir})
do
        grep -i ${i} ${softlogentry} > /dev/null 2>&1
        grepreco=${?}
        if [ ${grepreco} -eq 0 ]
        then
	    if [ -e ${softfiledir}${i} ]
	    then
		echo
	        echo "This ${i} file already uploaded so it's removing." 
                mv -fu ${softfiledir}${i} ${oldsoftfile}
		sleep 1 
	    fi
        elif [ ${grepreco} -ne 0 ]
        then
            echo
            echo "File ${i} not uploaded try to upload again.."
	    echo "${i}" | grep -i "IAD" >/dev/null 2>&1
	    if [ ${?} -ne 0 ]
	    then
                scp -r ${softfiledir}${i} ${it_programmer} > /dev/null 2>&1
		if [ ${?} -eq 0 ]
		then
		    echo
		    echo "This ${i} file upload successfull"
		else
		    echo
		    echo "Soft file uploading is Not DONE. ERROR!!"
		fi
		mv -fu ${softfiledir}${i} ${oldsoftfile}
	        grep -i "${i}" ${softlogentry} > /dev/null 2>&1
                if [ ${?} -ne 0 ]
                then
                    echo "$(date +%d/%m/%Y--%R)  ${i}  uploaded" >> ${softlogentry}
                else
		    echo "This ${i} log already created in softentry.log file"
                fi
	    else
		echo
		echo "This ${i} file is Agency so it's removing"
		mv -fu ${softfiledir}${i} ${oldsoftfile}
	    fi
	    sleep 1
        else
            echo
            echo "Old soft files nothing to upload..."
        fi
done
}

#Dvd file name creating
function dvd_file_name_create {
dvd_name=$(ls /opt/UploadPoint/ | sed "s/ //g")
for i in ${dvd_name}
do
    softno=$(echo "${i}" | cut -d _ -f 2 | sed "s/-//g")
    softfilename=$(echo soft-"${softno}".txt)
    fgrep=$(echo "${softfilename}" | cut -d . -f 1)
    grep -i -w "${fgrep}" ${softlogentry} > /dev/null 2>&1
    if [ ${?} -eq 0 ]
    then
        echo
        echo "This ${fgrep} file already upload. This DVD file ${i} deletable"
        sleep 1
    elif [ -s /imagedata1/Logs/Upload/${softfilename} ]
    then
        find /imagedata1/Logs/Upload/ -iname ${softfilename} -type f -exec cp -p {} ${softfiledir} \; 2> /dev/null
        sleep 1
    else
        echo
        echo "This file ${softfilename} not avilable in /imagedata1/Logs/Upload"
        echo "If that file is Incremental, Agengy or empty then leave it"
        sleep 1
    fi
done
}

#soft file renaming
function soft_file_rename {
if [ -e "${softfiledir}"*.txt ]
then
    cd ${softfiledir}
    for i in $(ls *.txt)
    do
        mv ${softfiledir}${i} ${softfiledir}$(echo ${i} | cut -d . -f 1) 2> /dev/null
        if [ ${?} -ne 0 ]
        then
	    echo "${i} Issue accoured on renaming"
        fi
    done
    cd ~
else
    echo "No soft files avilable.."
fi
}

#current soft files counting
function current_soft_file_count {
file_count=$(ls ${softfiledir} | wc -l)
echo
echo "Current Soft Files Count : ${file_count}"
if [ 0 -eq ${file_count} ]
then
        echo
        echo "No soft files for uploading..."
        sleep 1
else
        echo
        echo "Soft files checking and sending to IT Programmer...."
	sleep 1
        soft_file_upload
fi
}

#soft files uploading
function soft_file_upload {
softfilecount=$(ls ${softfiledir})
for i in ${softfilecount}
do
        grep -i -w "${i}" ${softlogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
            echo "${i}" | grep -i "IAD" > /dev/null 2>&1
            if [ ${?} -ne 0 ]
            then
                scp -r ${softfiledir}${i} ${it_programmer} > /dev/null 2>&1
		if [ ${?} -eq 0 ]
		then
		    echo
		    echo "This ${i} file upload successfull"
                    sleep 1
		fi
            else
		echo
                echo "This ${i} file is Agency so it's removing"
                mv -fu ${softfiledir}${i} ${oldsoftfile}
            fi
            grep -i "${i}" ${softlogentry} > /dev/null 2>&1
            if [ ${?} -ne 0 ]
            then
                echo "$(date +%d/%m/%Y--%R)  ${i}  uploaded" >> ${softlogentry}
            else
                echo
                echo "This log already created in softentry.log file"
            fi
        else
            if [ -e ${softfiledir}${i} ]
            then
                echo
                echo "This file is ${i} Already uploaded so it's removing."
                mv -fu ${softfiledir}${i} ${oldsoftfile}
            fi
        fi
done
}

#upload files check and removing
function after_upload {
for i in $(ls ${softfiledir})
do
    grep -i "${i}" ${softlogentry} > /dev/null 2>&1
    if [ ${?} -eq 0 ]
    then
	if [ -e ${softfiledir}${i} ]
	then
	    echo
	    echo "soft file upload completed ${i} now removing."
	    mv -fu ${softfiledir}${i} ${oldsoftfile}
	fi
    else
	echo 
	echo "File "${i}" not uploaded try to upload again."
	echo "${i}" | grep -i "IAD" > /dev/null 2>&1
	if [ ${?} -ne 0 ]
	then
            scp -r ${softfiledir}${i} ${it_programmer} > /dev/null 2>&1
	    if [ ${?} -eq 0 ]
	    then
		echo
		echo "This "${i}" file upload successfull"
                sleep 1
	    fi
	else
	    echo
	    echo "This "${i}" file is Agency so it's removing"
	    mv -fu ${softfiledir}${i} ${oldsoftfile}
	fi
        grep -i "${i}" ${softlogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
            echo "$(date +%d/%m/%Y--%R)  ${i}  uploaded" >> ${softlogentry}
        fi 
    fi
done
}

#summary files copying
function summary_file {
for i in ${dvd_name}
do
   sumval=$(echo "${i}" | cut -d - -f2)
   sumval2=$(echo "${i}" | cut -d - -f3,4 | cut -d _ -f 1)
   find /imagedata1/Logs/Upload/ -iname "SummaryReport-${scan_DOcode}-${sumval}\ -${sumval2}*.log" -type f -exec cp -p {} ${summarytemp} \; 2>/dev/null
   if [ ${?} -ne 0 ]
   then
       echo
       echo "Summary report Not avilable on this batch ${scan_DOcode}-${sumval} -${sumval2}."
   fi
done   
cd ${summarytemp}
for i in *''*
do
    mv "${i}" ${summarytemp}$(echo "${i}" | sed 's/ //g') > /dev/null 2>&1
done
cd ~
}

#summary date fetching in files
function summary_data_colect {
for i in $(ls ${summarytemp})
do
    echo "${i}" | grep -i H067 > /dev/null 2>&1
    health=${?}
    echo "${i}" | grep -i IAD > /dev/null 2>&1
    agency=${?}
    grep -i "Trying to insertdivision_067" ${summarytemp}${i} > /dev/null 2>&1
    regular=${?}
    grep -i "Incremental" ${summarytemp}${i} > /dev/null 2>&1
    if [ ${?} -eq 0 ]
    then
	#incremental section
        batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}${i} | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "policy" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $5 }' | cut -d . -f1,2 | sed 's/\./:/g' )
        endtime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $10 }' | cut -d . -f1,2 | sed 's/\./:/g' )
	sct=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $5 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $10 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep "${batchno}" ${summarylogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
	    echo
            echo "Incremental Summary log create for this batch ${i}.."
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -f ${summarytemp}${i}
        fi
    elif [ ${health} -eq 0 ]
    then
	#agengy batch
        batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}${i} | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -iE "policy|agency" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect==$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep "${batchno}" ${summarylogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
	    echo
            echo "Health Summary log create for this batch ${i}.."
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -f ${summarytemp}${i}
        fi
    elif [ ${agency} -eq 0 ]
    then
	#agengy section
        batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}${i} | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "agency" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep "${batchno}" ${summarylogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
	    echo
            echo "Agency Summary log create for this batch ${i}.."
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
        if [ ${reg_sec} -ne 0 ]
        then
            rm -f ${summarytemp}${i}
        fi
    elif [ ${regular} -eq 0 ]
    then
	#regular section
        batchno=$(cat ${summarytemp}${i} | grep -i "EDMS" | awk '{ print $9 $10 }' | awk -F[ '{ print $2 }' | awk -F] '{ print $1 }')
        date=$(cat ${summarytemp}${i} | grep -i "date of upload" | awk '{ print $NF }' | awk -F- '{ print $NF }' | sed 's/\//-/g' | sed 's/\./-/g')
        policycount=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "policy" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        images=$(cat ${summarytemp}${i} | grep -i "uploaded" | grep -i "images" | awk '{ print $NF }' | awk -F[ '{print $2}' | awk -F] '{ print $1 }')
        starttime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | cut -d : -f1,2 | sed 's/\./:/g')
        endtime=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | cut -d : -f1,2 | sed 's/\./:/g')
        sct=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $6 }' | sed 's/\./:/g')
        ect=$(cat ${summarytemp}${i} | grep -i "start" | awk '{ print $15 }' | sed 's/\./:/g')
        td=$(date -u -d "0 $(date -u -d "${ect}" +"%s") sec - $(date -u -d "${sct}" +"%s") sec" +"%H:%M:%S")
        grep "${batchno}" ${summarylogentry} > /dev/null 2>&1
        if [ ${?} -ne 0 ]
        then
	    echo
  	    echo "Regular Summary log create for this batch ${i}.."
            echo "${batchno},  ${date},  ${policycount},  ${images},  ${starttime},  ${endtime},  ${td}" >> ${summarylogentry}
        fi
	reg_sec=$(ls ${summarytemp} | wc -l)
	if [ ${reg_sec} -ne 0 ]
	then
            rm -f ${summarytemp}${i}
	fi
    else
        echo "That file not contain this information is missing ${i}"
    fi
done
}

#functio calls
function kalai {
variable
title
file_variable_create
dir_checking
old_soft_file_count
dvd_file_name_create
soft_file_rename
current_soft_file_count
after_upload
summary_file
summary_data_colect
echo
}
kalai
